@startuml "Tank Game Class Diagram"
' Layout settings
skinparam padding 5
skinparam packageMargin 200
skinparam packagePadding 1000
skinparam nodesep 60
skinparam ranksep 100
skinparam linetype ortho
skinparam PackageBorderColor DarkGreen
skinparam PackageBackgroundColor LightYellow

package "game" {
  together {
    enum Direction {
      U = 0
      UR
      R
      DR
      D
      DL
      L
      UL
    }

    enum Action {
      MoveFwd
      MoveBack
      Shoot
      RotateLeft_1_8
      RotateRight_1_8
      RotateLeft_1_4
      RotateRight_1_4
      None
    }

    struct Position {
      +int x
      +int y
      +Position operator+(const Position&) const
      +Position operator-(const Position&) const
    }
  }

  class DirectionUtils <<utility>> {
    +{static} Position dirToVector(Direction)
    +{static} Direction directionFromTo(const Position&, const Position&)
    +{static} Direction getOppositeDirection(Direction)
  }

  class Logger {
    -ofstream outputLog
    -ofstream inputErrorLog
    -string inputFilename
    -vector<string> stepLogs
    -bool hasInputErrors
    +Logger(const string& inputFile)
    +void logBadStep(int, const string&)
    +void logResult(const string&)
    +void logAction(int, const string&)
    +void logStepNum(int)
  }

  class GameBoard {
    -int width
    -int height
    -GameGrid grid
    +GameBoard(int w, int h)
    +Position wrap(Position p) const
    +void placeObject(const GameObjectPtr&)
    +vector<GameObjectPtr> getObjectsAt(Position p) const
    +void removeSpecificObject(const GameObjectPtr&)
    +void moveObj(const shared_ptr<MovingElement>&)
  }

  class GameManager {
    -GameBoard board
    -Logger logger
    -unique_ptr<Algorithm> algo1
    -unique_ptr<Algorithm> algo2
    -int stepCount
    -vector<shared_ptr<Shell>> shells
    -vector<shared_ptr<Tank>> tanks
    -int stepsRemaining
    -bool validGame
    -void executeTanksStep()
    -bool shoot(shared_ptr<Tank>)
    -void move(shared_ptr<MovingElement>, bool)
    -void moveShells()
    -bool checkPassingCollision(shared_ptr<MovingElement>, shared_ptr<MovingElement>)
    -bool canMove(shared_ptr<Tank>, bool)
    -bool isActionLegal(Action, shared_ptr<Tank>)
    -void destroyAndRemove(const GameObjectPtr&)
    -void checkShellCollisions(shared_ptr<Shell>, unordered_set<GameObjectPtr>&)
    -void checkTankCollisions(shared_ptr<Tank>, unordered_set<GameObjectPtr>&)
    -bool areAllTanksOutOfAmmo() const
    -bool isGameOver()
    -bool canTankShoot(shared_ptr<Tank>)
    +GameManager(const string& inputFile)
    +void runGame()
  }
}

package "objects" {
  abstract class GameObject {
    #Position pos
    #char symbol
    #bool destroyed
    +GameObject(Position p, char s)
    +virtual void destroy()
  }

  abstract class MovingElement {
    friend class GameManager
    #Direction dir
    #int playerId
    #Position prevPos
    +MovingElement(Position p, char symbol, Direction dir, int playerId)
    +Position getNextPos(bool backwards = false) const
  }

  together {
    class Wall {
      -int hitCount
      -void takeHit()
      +Wall(Position p)
      +bool isDestroyed() const
      +void destroy() override
    }

    class Mine {
      +Mine(Position p)
    }
  }

  together {
    class Shell {
      +Shell(Position p, Direction d, int playerId)
    }

    class Tank {
      friend class GameManager
      #int shellsRemaining = INITIAL_SHELLS_AMOUNT
      #int shootCooldown = 0
      #int backwardTimer = UNINITIALIZED
      #int lastBackwardStep = INT_MIN
      #string collisionType
      #Direction getNewDir(int angle)
      #void decreaseShootCooldown()
      #void decreaseBackwardTimer()
      #void setLastBackwardStep(int step)
      #bool isLastStepBack(int step)
      +Tank(Position p, Direction dir, int id)
      +void shoot()
      +void rotate(int angle)
      +bool isGoingBack() const
      +void setForward()
      +void setBackwards()
      +bool canShoot() const
      +bool isOutOfAmmo()
    }
  }
}

package "algorithms" {
  abstract class Algorithm {
    +{abstract} Action getNextAction(const GameBoard&, const Tank&, const Tank&)
    #int stepsUntilShellHitsTank(const Shell&, const Tank&, const GameBoard&, int maxSteps = 10)
    #{static} bool areFacingEachOther(const Tank&, const Shell&)
    #{static} Action rotateToward(Direction, Direction)
  }

  together {
    class Chaser {
      -vector<Position> bfsPath
      -Position lastEnemyPos
      -int lastStep
      +Action getNextAction(const GameBoard&, const Tank&, const Tank&) override
    }

    class Evader {
      +Action getNextAction(const GameBoard&, const Tank&, const Tank&) override
      +Action checkOpponentAndAct(const GameBoard&, const Tank&, const Tank&)
    }
  }
}

' Inheritance relationships
GameObject <|-- MovingElement
GameObject <|-- Wall
GameObject <|-- Mine
MovingElement <|-- Shell
MovingElement <|-- Tank
Algorithm <|-- Chaser
Algorithm <|-- Evader

' Composition relationships
GameManager o-- GameBoard
GameManager o-- Logger
GameManager o-- "2" Algorithm
GameManager o-- "*" Shell
GameManager o-- "2" Tank

GameBoard o-- "*" GameObject

' Added relationships
GameObject o-- Position
MovingElement o-- Direction
Algorithm ..> Action
DirectionUtils -- Direction
DirectionUtils -- Position
Position <.. MovingElement

@enduml